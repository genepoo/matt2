/*
 * MattGuiNB.java
 *
 * Created on 16 July 2007, 17:18
 */

package matt;

import abc.midi.*;
import javax.sound.midi.*;
import abc.parser.TuneBook;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.awt.*;
import javax.swing.table.*;
import java.util.*;
import abc.notation.Tune;
import javax.swing.plaf.ColorUIResource;


/**
 *
 * @author  Bryan
 */
public class MattGuiNB extends javax.swing.JFrame implements GUI{
    
    private ODCFTranscriber transcriber = null;
    private BatchJob batchJob = null;
    private Matt matt;
    private static MattGuiNB _instance;
    
    private Graph frameGraph  = new Graph();
    private Graph fftGraph = new Graph();
    private Graph signalGraph  = new Graph();
    private Graph odfGraph = new Graph();
    private Vector tuneMatches = new Vector();
    
    private Vector<Graph> fftGraphs = new Vector(); 
    private TunePlayer tunePlayer = new TunePlayer();
    ABCFinder finder = null;
    ABCMatch best = null;
    AudioCapture audioCapture = new AudioCapture();
    
    /** Creates new form MattGuiNB */
    private MattGuiNB() {
        initComponents();
        setTitle("MATT2 - Machine Annotation of Traditional Tunes - by Bryan Duggan");
        // Add the graphs...
        frameGraph.setBounds(10,10,380,120);
        fftGraph.setBounds(400,10,380,120);
        signalGraph.setBounds(10,140, 770, 120);        
        odfGraph.setBounds(10,270, 770, 120);
               
        getContentPane().add(frameGraph);
        getContentPane().add(fftGraph);
        getContentPane().add(signalGraph);
        getContentPane().add(odfGraph);
        
        frameGraph.setBackground(Color.CYAN);
        signalGraph.setBackground(Color.GREEN);
        odfGraph.setBackground(Color.YELLOW);
        fftGraph.setBackground(Color.WHITE);
        center(this, 800, 700);
        tunePlayer.start();
        MattProperties.instance();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnPlayOriginal = new javax.swing.JButton();
        btnPlayTranscription = new javax.swing.JButton();
        btnChooseFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnClearLog = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtABC = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btnTranscribe = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnPlayFound = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMatches = new javax.swing.JTable();
        btnQuit = new javax.swing.JButton();
        btnAnalysed = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtBest = new javax.swing.JLabel();
        btnBest = new javax.swing.JButton();
        btnReindex = new javax.swing.JButton();
        btnBatch = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        btnLiveQuery = new javax.swing.JButton();
        cbSelectFFT = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnAbout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 1, 1));

        spLog.setAutoscrolls(true);

        txtLog.setColumns(20);
        txtLog.setLineWrap(true);
        txtLog.setRows(5);
        txtLog.setWrapStyleWord(true);
        spLog.setViewportView(txtLog);

        btnPlayOriginal.setText("Original");
        btnPlayOriginal.setName("btnPlayOriginal"); // NOI18N
        btnPlayOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayOriginalActionPerformed(evt);
            }
        });

        btnPlayTranscription.setText("Transcribed");
        btnPlayTranscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayTranscriptionActionPerformed(evt);
            }
        });

        btnChooseFile.setText("Choose File");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Log:");

        btnClearLog.setText("Clear Log");
        btnClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearLogActionPerformed(evt);
            }
        });

        txtABC.setColumns(20);
        txtABC.setLineWrap(true);
        txtABC.setRows(5);
        jScrollPane1.setViewportView(txtABC);

        jLabel3.setText("ABC:");

        btnTranscribe.setText("Transcribe");
        btnTranscribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranscribeActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnPlayFound.setText("Found");
        btnPlayFound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayFoundActionPerformed(evt);
            }
        });

        jLabel4.setText("Matches:");

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tblMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Matched", "ED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMatches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMatchesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMatches);

        btnQuit.setText("Quit");
        btnQuit.setName("btnQuit"); // NOI18N
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnAnalysed.setText("Analysed");
        btnAnalysed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalysedActionPerformed(evt);
            }
        });

        txtBest.setText("<Start searcing!>");

        btnBest.setText("Best");
        btnBest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBestActionPerformed(evt);
            }
        });

        btnReindex.setText("Reindex");
        btnReindex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReindexActionPerformed(evt);
            }
        });

        btnBatch.setText("Batch");
        btnBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatchActionPerformed(evt);
            }
        });

        btnLiveQuery.setText("Live Query");
        btnLiveQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiveQueryActionPerformed(evt);
            }
        });

        cbSelectFFT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSelectFFTItemStateChanged(evt);
            }
        });
        cbSelectFFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelectFFTActionPerformed(evt);
            }
        });

        jLabel1.setText("Graph:");

        btnAbout.setText("About");
        btnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(spLog, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel1)
                                .add(18, 18, 18)
                                .add(cbSelectFFT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(103, 103, 103))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnLiveQuery, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, btnBatch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnChooseFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .add(btnTranscribe, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnQuit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnFind, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnAnalysed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnPlayOriginal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnPlayFound)
                            .add(btnPlayTranscription))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnClearLog, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnBest, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(3, 3, 3)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(4, 4, 4)
                                .add(btnReindex)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnAbout))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(19, 19, 19)
                                .add(txtBest, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 253, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(42, 42, 42)
                .add(jLabel6)
                .add(501, 501, 501))
        );

        layout.linkSize(new java.awt.Component[] {btnChooseFile, btnFind, btnPlayFound, btnPlayOriginal, btnPlayTranscription, btnTranscribe}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(644, Short.MAX_VALUE)
                .add(jLabel6)
                .add(186, 186, 186))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(392, 392, 392)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3)
                        .add(jLabel4)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(spLog, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(cbSelectFFT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel1)))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnFind)
                            .add(btnPlayOriginal)
                            .add(btnChooseFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnPlayFound)
                            .add(btnClearLog)
                            .add(btnBatch))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnQuit)
                            .add(btnTranscribe)
                            .add(btnAnalysed)
                            .add(btnPlayTranscription, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnBest)
                            .add(btnReindex)
                            .add(btnLiveQuery)
                            .add(btnAbout)))
                    .add(txtBest))
                .add(171, 171, 171))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayFoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayFoundActionPerformed
         int row = tblMatches.getSelectedRow();
         ABCMatch match = (ABCMatch) tuneMatches.elementAt(row);         
         try
         {  
             
             if (! MIDITools.instance().isFinished())
             {
                 MIDITools.instance().setFinished(true);
             }
             else
             {
                    //Tune tune = best.getTune();
                    MIDITools.instance().playMidiFile(match.getCorpusEntry().getMidiFileName());
                     //tunePlayer.play(tune);
             }
             /*
              // TuneBook book = new TuneBook(new File(match.getFileName()));
             if (tunePlayer.isPlaying())
             {
                 tunePlayer.stopPlaying();
             }
             else
             {
                    tunePlayer.play(tune);
             }
            */
         }
         catch (Exception e)
         {
             System.out.println("Could not play tune");
             e.printStackTrace();
         }
    }//GEN-LAST:event_btnPlayFoundActionPerformed

    private void tblMatchesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMatchesMouseClicked
        if (evt.getClickCount() == 2) {
         JTable target = (JTable)evt.getSource();
         int row = target.getSelectedRow();
         int column = target.getSelectedColumn();
         ABCMatch match = (ABCMatch) tuneMatches.elementAt(row);
         JOptionPane.showMessageDialog(this, match.getNotation(), match.getFileName(), JOptionPane.PLAIN_MESSAGE);
         }
    }//GEN-LAST:event_tblMatchesMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
// TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        if ((finder != null) && finder.isRunning())
        {
            finder.setRunning(false);            
        }
        else
        {
            finder = new ABCFinder();
            finder.setTranscribedNotes(transcriber.getTranscribedNotes());
            finder.setSearchString(getTxtABC().getText());
            finder.setStartIn(MattProperties.instance().get("SearchCorpus").toString());
            finder.finda();
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnTranscribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranscribeActionPerformed
        transcriber.transcribea();        
    }//GEN-LAST:event_btnTranscribeActionPerformed

    private void btnClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearLogActionPerformed
        txtLog.setText("");
        getTxtABC().setText("");
    }//GEN-LAST:event_btnClearLogActionPerformed

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new WavFilter());
        System.out.println(transcriber.getInputFile());
        
        fc.setSelectedFile(new File("" + MattProperties.instance().get("BatchPath")));
        int returnVal = fc.showOpenDialog(MattGuiNB.this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            clearGraphs();
            transcriber.setInputFile(fc.getSelectedFile().toString());
            transcriber.loadAudio();
        }
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void btnPlayOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayOriginalActionPerformed
        transcriber.playOriginal();
    }//GEN-LAST:event_btnPlayOriginalActionPerformed

    private void btnPlayTranscriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayTranscriptionActionPerformed
        if (tunePlayer.isPlaying())
        {
            tunePlayer.stopPlaying();
            return;
        }
        
        try 
        {
            FileWriter outFile = new FileWriter("temp.abc");
            PrintWriter out = new PrintWriter(outFile);
            
            out.println("X:1");
            out.println("T:Temp");
            out.println("R:Reel");
            out.println("M:C|");
            out.println("L:1/8");
            out.println("K:D");
            out.println(getTxtABC().getText());
            out.close();
            File abcFile = new File ("temp.abc");
            TuneBook book = new TuneBook(abcFile);
            Tune aTune = book.getTune(1);
            tunePlayer.play(aTune);
        } 
        catch (Exception e)
        {
            e.printStackTrace();
        }       
    }//GEN-LAST:event_btnPlayTranscriptionActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnAnalysedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalysedActionPerformed
        if (transcriber.isIsPlaying())
        {
            transcriber.setIsPlaying(false);
            
        }
        else
        {
            new Thread()
            {
                public void run()
                {
                    transcriber.playTranscription();
                }
            }.start();
        }
    }//GEN-LAST:event_btnAnalysedActionPerformed

    private void btnBestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBestActionPerformed
    
        if (best == null)
        {
            return;
        }
         try
         {
             // TuneBook book = new TuneBook(new File(match.getFileName()));
             if (! MIDITools.instance().isFinished())
             {
                 MIDITools.instance().setFinished(true);
             }
             else
             {
                    //Tune tune = best.getTune();
                    MIDITools.instance().playMidiFile(best.getCorpusEntry().getMidiFileName());
                     //tunePlayer.play(tune);
             }
         }
         catch (Exception e)
         {
             System.out.println("Could not play tune");
             e.printStackTrace();
         }
    }//GEN-LAST:event_btnBestActionPerformed

    private void btnReindexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReindexActionPerformed
        //CorpusIndex.instance().reindex();
        new Thread()
        {
            public void run()
            {
            	//CorpusIndex.instance().reindex();
                CorpusIndex.instance().updateSemexKeys();
            }
        }
        .start();
    }//GEN-LAST:event_btnReindexActionPerformed

    private void btnBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatchActionPerformed
        if (batchJob!= null && batchJob.isRunning())
        {
            batchJob.setRunning(false);
        }
        else
        {
            batchJob = new BatchJob();
            if (batchJob.chooseFolder())
            {
                batchJob.start();
            }
        }
    }//GEN-LAST:event_btnBatchActionPerformed

    private void cbSelectFFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelectFFTActionPerformed
        
    }//GEN-LAST:event_cbSelectFFTActionPerformed

    private void cbSelectFFTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSelectFFTItemStateChanged
       int i = cbSelectFFT.getSelectedIndex();
       if (i == -1 || (fftGraphs.size() == 0))
       {
           return;
       }       
         getContentPane().remove(fftGraph);
         if (i < fftGraphs.size())
         {
            fftGraph = fftGraphs.elementAt(i);
            fftGraph.setBounds(400,10,380,120);
            getContentPane().add(fftGraph);
            fftGraph.repaint();
         }
    }//GEN-LAST:event_cbSelectFFTItemStateChanged

    private void btnLiveQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiveQueryActionPerformed
        if (btnLiveQuery.getText().equals("Live Query"))
        {
            btnLiveQuery.setText("Recording...");
            audioCapture.start();            
        }
        else
        {
            audioCapture.stop();
            btnLiveQuery.setText("Live Query");
            try 
            {
                Thread.sleep(1000);
            }
            catch (Exception e)
            {
                
            }
            transcriber.setInputFile(audioCapture.getFileName());
            transcriber.loadAudio();
        }
        
    }//GEN-LAST:event_btnLiveQueryActionPerformed

    private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
        About.instance().setVisible(true);
    }//GEN-LAST:event_btnAboutActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MattGuiNB().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnAnalysed;
    private javax.swing.JButton btnBatch;
    private javax.swing.JButton btnBest;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnClearLog;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnLiveQuery;
    private javax.swing.JButton btnPlayFound;
    private javax.swing.JButton btnPlayOriginal;
    private javax.swing.JButton btnPlayTranscription;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnReindex;
    private javax.swing.JButton btnTranscribe;
    private javax.swing.JComboBox cbSelectFFT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane spLog;
    private javax.swing.JTable tblMatches;
    private javax.swing.JTextArea txtABC;
    private javax.swing.JLabel txtBest;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
    
    
    
    public void addFFTGraph(Graph graph, String title)
    {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbSelectFFT.getModel();
        model.addElement("" + title);
        fftGraphs.add(graph);
        cbSelectFFT.setSelectedIndex(model.getSize() -1);        
        getContentPane().remove(fftGraph);
        graph.setBounds(400,10,380,120);
        /*
        int r = (int) (Math.random() * 255.0f);
        int g = (int) (Math.random() * 255.0f);
        int b = (int) (Math.random() * 255.0f);
        Color c = new Color(r, g, b);
        graph.setBackground(c);
        */
        graph.setBackground(Color.WHITE);
        fftGraph = graph;
        getContentPane().add(graph);
        graph.repaint();       
    }
    
    public void clearFFTGraphs()
    {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbSelectFFT.getModel();
        model.removeAllElements();
        fftGraphs.removeAllElements();
        fftGraph.getDefaultSeries().clear();
    }
    
    public void enableButtons(boolean enabled)
    {
        /*
         btnPlayTranscription.setEnabled(enabled);
        btnChooseFile.setEnabled(enabled);
        btnPlayOriginal.setEnabled(enabled);
        btnTranscribe.setEnabled(enabled);                
        btnPlayFound.setEnabled(enabled);
        btnFind.setEnabled(enabled);
         */ 
    }
    
    public void clearGraphs()
    {
        frameGraph.clear();
        signalGraph.clear();
        odfGraph.clear();
        fftGraph.clear();
        clearMatches();
        getFftGraph().removeAll();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbSelectFFT.getModel();
        model.removeAllElements();
        fftGraphs.removeAllElements();
        txtABC.setText("");
        txtLog.setText("");
        txtBest.setText("");
    }
    
    public static void center(JFrame frame, int w, int h) 
    {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point center = ge.getCenterPoint();
        Rectangle bounds = ge.getMaximumWindowBounds();
        int x = center.x - w/2, y = center.y - h/2;
        frame.setBounds(x, y, w, h);
        if (w == bounds.width && h == bounds.height)
            frame.setExtendedState(Frame.MAXIMIZED_BOTH);
        frame.validate();
    }
    
    public ODCFTranscriber getTranscriber() {
        return transcriber;
    }

    public void setTranscriber(ODCFTranscriber transcriber) {
        this.transcriber = transcriber;
    }
    
    // Variables declaration - do not modify                     
    // End of variables declaration                   

    public Matt getMatt() {
        return matt;
    }

    public void setMatt(Matt matt) {
        this.matt = matt;
    }

    public Graph getFrameGraph() {
        return frameGraph;
    }


    public Graph getSignalGraph() {
        return signalGraph;
    }

    public Graph getOdfGraph() {
        return odfGraph;
    }
    
    public static void log(Object s)
    {
        instance().getTxtLog().append(s + System.getProperty("line.separator"));
        instance().getTxtLog().setCaretPosition(_instance.txtLog.getText().length());
    }
    
    public static MattGuiNB instance()
    {
        if (_instance == null)
        {
            _instance = new MattGuiNB();
            // CorpusIndex.intstance();
        }
        return _instance;
    }
    
    public void addMatch(ABCMatch match)
    {
        DefaultTableModel model = (DefaultTableModel) tblMatches.getModel();
        Vector row = new Vector();
        row.add(match.getTitle());
        row.add(match.getLine());
        row.add(new Double(match.getEditDistance()));
        model.addRow(row);
        tuneMatches.add(match);
    }
    
    public void clearMatches()
    {
        DefaultTableModel model = (DefaultTableModel) tblMatches.getModel();
        
        model.setRowCount(0);
        tuneMatches.clear();
    }
    

    public javax.swing.JTextArea getTxtABC()
    {
        return txtABC;
    }

    public void setTxtABC(javax.swing.JTextArea txtABC)
    {
        this.txtABC = txtABC;
    }
    
    public synchronized void setBestSoFar(ABCMatch match)
    {
        best = match;
        txtBest.setText("Title: " + match.getTitle() + " ED:" + match.getEditDistance());
    }

    public javax.swing.JProgressBar getProgressBar()
    {
        return progressBar;
    }

    public void setProgressBar(javax.swing.JProgressBar progressBar)
    {
        this.progressBar = progressBar;
    }

    public javax.swing.JTextArea getTxtLog()
    {
        return txtLog;
    }

    public void setTxtLog(javax.swing.JTextArea txtLog)
    {
        this.txtLog = txtLog;
    }

    public Graph getFftGraph()
    {
        return fftGraph;
    }

    public void setFftGraph(Graph fftGraph)
    {
        this.fftGraph = fftGraph;
    }

    public Vector<Graph> getFftGraphs()
    {
        return fftGraphs;
    }

    public void setFftGraphs(Vector<Graph> fftGraphs)
    {
        this.fftGraphs = fftGraphs;
    }

    public void setBns() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
